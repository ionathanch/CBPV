import CBPV.Equivalence

open Nat ValType ComType Val Com

theorem letLet {Œì n m m' A} {B : ComType}
  (hlet : Œì ‚ä¢ letin n m ‚à∂ F A)
  (hm' : Œì ‚à∑ A ‚ä¢ m' ‚à∂ B) :
  Œì ‚ä® letin (letin n m) m' ~ letin n (letin m (renameCom (lift succ) m')) ‚à∂ B := by
  intro œÉ œÑ hœÉœÑ
  let ‚ü®v‚ÇÅ, v‚ÇÇ, rv‚ÇÅ, rv‚ÇÇ, hA‚ü© := (soundCom hlet œÉ œÑ hœÉœÑ).ret_inv
  have r‚ÇÅ' : letin ((letin n m)‚¶ÉœÉ‚¶Ñ) (m'‚¶É‚áë œÉ‚¶Ñ) ‚áí‚ãÜ m'‚¶Év‚ÇÅ +: œÉ‚¶Ñ := by
    rw [substUnion]; exact .trans' rv‚ÇÅ.let (.once .Œ∂)
  cases hlet with | letin hn hm =>
  let ‚ü®w‚ÇÅ, w‚ÇÇ, rw‚ÇÅ, rw‚ÇÇ, _‚ü© := (soundCom hn œÉ œÑ hœÉœÑ).ret_inv
  have rlet : letin (n‚¶ÉœÑ‚¶Ñ) (m‚¶É‚áë œÑ‚¶Ñ) ‚áí‚ãÜ m‚¶Éw‚ÇÇ +: œÑ‚¶Ñ := calc
    _ ‚áí‚ãÜ letin (ret w‚ÇÇ) (m‚¶É‚áë œÑ‚¶Ñ) := rw‚ÇÇ.let
    _ ‚áí  m‚¶Éw‚ÇÇ +: œÑ‚¶Ñ := by rw [substUnion]; exact .Œ∂
  let ‚ü®_, rlet‚ÇÅ, rlet‚ÇÇ‚ü© := confluence rv‚ÇÇ rlet
  rw [‚Üê rlet‚ÇÅ.ret_inv] at rlet‚ÇÇ
  have r‚ÇÇ' : (letin n (letin m (renameCom (lift succ) m')))‚¶ÉœÑ‚¶Ñ ‚áí‚ãÜ m'‚¶Év‚ÇÇ +: œÑ‚¶Ñ := calc
    _ ‚áí‚ãÜ letin (ret w‚ÇÇ) (letin (m‚¶É‚áë œÑ‚¶Ñ) ((renameCom (lift succ) m')‚¶É‚áë‚áë œÑ‚¶Ñ))
      := by simp only [substCom]; exact rw‚ÇÇ.let
    _ ‚áí (letin (m‚¶É‚áë œÑ‚¶Ñ) ((renameCom (lift succ) m')‚¶É‚áë‚áë œÑ‚¶Ñ))‚¶Éw‚ÇÇ‚¶Ñ := .Œ∂
    _ = letin (m‚¶Éw‚ÇÇ +: œÑ‚¶Ñ) (m'‚¶É‚áëœÑ‚¶Ñ)
      := by simp only [substCom]; rw [‚Üê substUnion, renameDropSubst]
    _ ‚áí‚ãÜ letin (ret v‚ÇÇ) (m'‚¶É‚áëœÑ‚¶Ñ) := rlet‚ÇÇ.let
    _ ‚áí m'‚¶Év‚ÇÇ +: œÑ‚¶Ñ := by rw [substUnion]; exact .Œ∂
  exact ‚Ñ∞.bwds r‚ÇÅ' r‚ÇÇ' (soundCom hm' (v‚ÇÅ +: œÉ) (v‚ÇÇ +: œÑ) (semCtxt.cons hA hœÉœÑ))

theorem appLet {Œì n m v A B}
  (hlet : Œì ‚ä¢ letin n m ‚à∂ Arr A B)
  (hv : Œì ‚ä¢ v ‚à∂ A) :
  Œì ‚ä® app (letin n m) v ~ letin n (app m (renameVal succ v)) ‚à∂ B := by
  intro œÉ œÑ hœÉœÑ
  let ‚ü®n‚ÇÅ, n‚ÇÇ, r‚ÇÅ, r‚ÇÇ, hB‚ü© := (soundCom hlet œÉ œÑ hœÉœÑ).lam_inv
  have r‚ÇÅ' : app ((letin n m)‚¶ÉœÉ‚¶Ñ) (v‚¶ÉœÉ‚¶Ñ) ‚áí‚ãÜ n‚ÇÅ‚¶Év‚¶ÉœÉ‚¶Ñ‚¶Ñ := .trans' r‚ÇÅ.app (.once .Œ≤)
  simp only [substCom] at *
  cases hlet with | letin hn hm =>
  let ‚ü®w‚ÇÅ, w‚ÇÇ, _, rw‚ÇÇ, hA'‚ü© := (soundCom hn œÉ œÑ hœÉœÑ).ret_inv
  let ‚ü®_, m‚ÇÇ, _, rm‚ÇÇ, _‚ü© := (soundCom hm (w‚ÇÅ +: œÉ) (w‚ÇÇ +: œÑ) (semCtxt.cons hA' hœÉœÑ)).lam_inv
  have rlet : letin (n‚¶ÉœÑ‚¶Ñ) (m‚¶É‚áë œÑ‚¶Ñ) ‚áí‚ãÜ lam m‚ÇÇ := calc
    _ ‚áí‚ãÜ letin (ret w‚ÇÇ) (m‚¶É‚áë œÑ‚¶Ñ) := rw‚ÇÇ.let
    _ ‚áí  m‚¶Éw‚ÇÇ +: œÑ‚¶Ñ := by rw [substUnion]; exact .Œ∂
    _ ‚áí‚ãÜ lam m‚ÇÇ := rm‚ÇÇ
  let ‚ü®_, rlam‚ÇÅ, rlam‚ÇÇ‚ü© := confluence r‚ÇÇ rlet
  rw [‚Üê rlam‚ÇÇ.lam_inv] at rlam‚ÇÅ; injection rlam‚ÇÅ.lam_inv with e; subst e
  clear rlet rlam‚ÇÅ rlam‚ÇÇ
  have r‚ÇÇ' : letin (n‚¶ÉœÑ‚¶Ñ) (app (m‚¶É‚áë œÑ‚¶Ñ) (renameVal succ v‚¶É‚áë œÑ‚¶Ñ))
      ‚áí‚ãÜ n‚ÇÇ‚¶Év‚¶ÉœÑ‚¶Ñ‚¶Ñ := calc
    _ ‚áí‚ãÜ letin (ret w‚ÇÇ) (app (m‚¶É‚áë œÑ‚¶Ñ) (renameVal succ v‚¶É‚áë œÑ‚¶Ñ)) := rw‚ÇÇ.let
    _ ‚áí  (app (m‚¶É‚áë œÑ‚¶Ñ) (renameVal succ v‚¶É‚áë œÑ‚¶Ñ))‚¶Éw‚ÇÇ‚¶Ñ := .Œ∂
    _ = app (m‚¶Éw‚ÇÇ +: œÑ‚¶Ñ) (v‚¶ÉœÑ‚¶Ñ)
      := by simp only [substCom]; rw [‚Üê substUnion, ‚Üê renameUpSubstVal, ‚Üê substDropVal]
    _ ‚áí‚ãÜ app (lam n‚ÇÇ) (v‚¶ÉœÑ‚¶Ñ) := rm‚ÇÇ.app
    _ ‚áí  n‚ÇÇ‚¶Év‚¶ÉœÑ‚¶Ñ‚¶Ñ := .Œ≤
  exact ‚Ñ∞.bwds r‚ÇÅ' r‚ÇÇ' (hB _ _ (soundVal hv œÉ œÑ hœÉœÑ))

theorem fstLet {Œì n m B‚ÇÅ B‚ÇÇ}
  (hlet : Œì ‚ä¢ letin n m ‚à∂ Prod B‚ÇÅ B‚ÇÇ) :
  Œì ‚ä® fst (letin n m) ~ letin n (fst m) ‚à∂ B‚ÇÅ := by
  intro œÉ œÑ hœÉœÑ
  let ‚ü®n‚ÇÅ, _, n‚ÇÇ, _, r‚ÇÅ, r‚ÇÇ, hB‚ÇÅ‚ü© := (soundCom hlet œÉ œÑ hœÉœÑ).fst
  have r‚ÇÅ' : fst ((letin n m)‚¶ÉœÉ‚¶Ñ) ‚áí‚ãÜ n‚ÇÅ := .trans' r‚ÇÅ.fst (.once .œÄ1)
  simp only [substCom] at *
  cases hlet with | letin hn hm =>
  let ‚ü®w‚ÇÅ, w‚ÇÇ, _, rw‚ÇÇ, hA'‚ü© := (soundCom hn œÉ œÑ hœÉœÑ).ret_inv
  let ‚ü®m‚ÇÅ, _, m‚ÇÇ, _, _, r‚ÇÇ', _‚ü© := (soundCom hm (w‚ÇÅ +: œÉ) (w‚ÇÇ +: œÑ) (semCtxt.cons hA' hœÉœÑ)).fst
  have rlet : letin (n‚¶ÉœÑ‚¶Ñ) (m‚¶É‚áë œÑ‚¶Ñ) ‚áí‚ãÜ prod m‚ÇÇ _ := calc
    _ ‚áí‚ãÜ letin (ret w‚ÇÇ) (m‚¶É‚áë œÑ‚¶Ñ) := rw‚ÇÇ.let
    _ ‚áí  m‚¶Éw‚ÇÇ +: œÑ‚¶Ñ              := by rw [substUnion]; exact .Œ∂
    _ ‚áí‚ãÜ prod m‚ÇÇ _               := r‚ÇÇ'
  let ‚ü®_, rprod‚ÇÅ, rprod‚ÇÇ‚ü© := confluence r‚ÇÇ rlet
  rw [‚Üê rprod‚ÇÇ.prod_inv] at rprod‚ÇÅ; injection rprod‚ÇÅ.prod_inv with e‚ÇÅ e‚ÇÇ; subst e‚ÇÅ e‚ÇÇ
  clear rlet rprod‚ÇÅ rprod‚ÇÇ
  have r‚ÇÇ' : letin (n‚¶ÉœÑ‚¶Ñ) (fst (m‚¶É‚áë œÑ‚¶Ñ)) ‚áí‚ãÜ n‚ÇÇ := calc
    _ ‚áí‚ãÜ letin (ret w‚ÇÇ) (fst (m‚¶É‚áë œÑ‚¶Ñ)) := rw‚ÇÇ.let
    _ ‚áí  fst (m‚¶É‚áë œÑ‚¶Ñ‚¶Éw‚ÇÇ‚¶Ñ)              := .Œ∂
    _ =  fst (m‚¶Éw‚ÇÇ +: œÑ‚¶Ñ)              := by rw [‚Üê substUnion]
    _ ‚áí‚ãÜ fst (prod n‚ÇÇ _)               := r‚ÇÇ'.fst
    _ ‚áí  n‚ÇÇ                            := .œÄ1
  exact ‚Ñ∞.bwds r‚ÇÅ' r‚ÇÇ' hB‚ÇÅ

theorem sndLet {Œì n m B‚ÇÅ B‚ÇÇ}
  (hlet : Œì ‚ä¢ letin n m ‚à∂ Prod B‚ÇÅ B‚ÇÇ) :
  Œì ‚ä® snd (letin n m) ~ letin n (snd m) ‚à∂ B‚ÇÇ := by
  intro œÉ œÑ hœÉœÑ
  let ‚ü®_, n‚ÇÅ, _, n‚ÇÇ, r‚ÇÅ, r‚ÇÇ, hB‚ÇÇ‚ü© := (soundCom hlet œÉ œÑ hœÉœÑ).snd
  have r‚ÇÅ' : snd ((letin n m)‚¶ÉœÉ‚¶Ñ) ‚áí‚ãÜ n‚ÇÅ := .trans' r‚ÇÅ.snd (.once .œÄ2)
  simp only [substCom] at *
  cases hlet with | letin hn hm =>
  let ‚ü®w‚ÇÅ, w‚ÇÇ, _, rw‚ÇÇ, hA'‚ü© := (soundCom hn œÉ œÑ hœÉœÑ).ret_inv
  let ‚ü®m‚ÇÅ, _, m‚ÇÇ, _, _, r‚ÇÇ', _‚ü© := (soundCom hm (w‚ÇÅ +: œÉ) (w‚ÇÇ +: œÑ) (semCtxt.cons hA' hœÉœÑ)).fst
  have rlet : letin (n‚¶ÉœÑ‚¶Ñ) (m‚¶É‚áë œÑ‚¶Ñ) ‚áí‚ãÜ prod m‚ÇÇ _ := calc
    _ ‚áí‚ãÜ letin (ret w‚ÇÇ) (m‚¶É‚áë œÑ‚¶Ñ) := rw‚ÇÇ.let
    _ ‚áí  m‚¶Éw‚ÇÇ +: œÑ‚¶Ñ              := by rw [substUnion]; exact .Œ∂
    _ ‚áí‚ãÜ prod m‚ÇÇ _               := r‚ÇÇ'
  let ‚ü®_, rprod‚ÇÅ, rprod‚ÇÇ‚ü© := confluence r‚ÇÇ rlet
  rw [‚Üê rprod‚ÇÇ.prod_inv] at rprod‚ÇÅ; injection rprod‚ÇÅ.prod_inv with e‚ÇÅ e‚ÇÇ; subst e‚ÇÅ e‚ÇÇ
  clear rlet rprod‚ÇÅ rprod‚ÇÇ
  have r‚ÇÇ' : letin (n‚¶ÉœÑ‚¶Ñ) (snd (m‚¶É‚áë œÑ‚¶Ñ)) ‚áí‚ãÜ n‚ÇÇ := calc
    _ ‚áí‚ãÜ letin (ret w‚ÇÇ) (snd (m‚¶É‚áë œÑ‚¶Ñ)) := rw‚ÇÇ.let
    _ ‚áí  snd (m‚¶É‚áë œÑ‚¶Ñ‚¶Éw‚ÇÇ‚¶Ñ)              := .Œ∂
    _ =  snd (m‚¶Éw‚ÇÇ +: œÑ‚¶Ñ)              := by rw [‚Üê substUnion]
    _ ‚áí‚ãÜ snd (prod _ n‚ÇÇ)               := r‚ÇÇ'.snd
    _ ‚áí  n‚ÇÇ                            := .œÄ2
  exact ‚Ñ∞.bwds r‚ÇÅ' r‚ÇÇ' hB‚ÇÇ

theorem letCase {Œì v m‚ÇÅ m‚ÇÇ n A} {B : ComType}
  (hcase : Œì ‚ä¢ case v m‚ÇÅ m‚ÇÇ ‚à∂ F A)
  (hn : Œì ‚à∑ A ‚ä¢ n ‚à∂ B) :
  Œì ‚ä® letin (case v m‚ÇÅ m‚ÇÇ) n
    ~ case v (letin m‚ÇÅ (renameCom (lift succ) n)) (letin m‚ÇÇ (renameCom (lift succ) n)) ‚à∂ B := by
  intro œÉ œÑ hœÉœÑ
  sorry

theorem appCase {Œì v w m‚ÇÅ m‚ÇÇ A B}
  (hcase : Œì ‚ä¢ case v m‚ÇÅ m‚ÇÇ ‚à∂ Arr A B)
  (hw : Œì ‚ä¢ w ‚à∂ A) :
  Œì ‚ä® app (case v m‚ÇÅ m‚ÇÇ) w ~ case v (app m‚ÇÅ (renameVal succ w)) (app m‚ÇÇ (renameVal succ w)) ‚à∂ B := by
  intro œÉ œÑ hœÉœÑ
  let ‚ü®n‚ÇÅ, n‚ÇÇ, r‚ÇÅ, r‚ÇÇ, hB‚ÇÅ‚ü© := (soundCom hcase œÉ œÑ hœÉœÑ).lam_inv
  have r‚ÇÅ' : app ((case v m‚ÇÅ m‚ÇÇ)‚¶ÉœÉ‚¶Ñ) (w‚¶ÉœÉ‚¶Ñ) ‚áí‚ãÜ n‚ÇÅ‚¶Éw‚¶ÉœÉ‚¶Ñ‚¶Ñ := .trans' r‚ÇÅ.app (.once .Œ≤)
  simp only [substCom] at *
  cases hcase with | case hv hm‚ÇÅ hm‚ÇÇ =>
  let hv := soundVal hv œÉ œÑ hœÉœÑ; unfold ùí± at hv
  match hv with
  | .inl ‚ü®v‚ÇÅ, v‚ÇÇ, hA‚ÇÅ, e‚ÇÅ, e‚ÇÇ‚ü© =>
    rw [e‚ÇÇ]; rw [e‚ÇÇ] at r‚ÇÇ
    let ‚ü®_, _, _, r‚ÇÇ', hB‚ÇÇ‚ü© := (soundCom hm‚ÇÅ (v‚ÇÅ +: œÉ) (v‚ÇÇ +: œÑ) (semCtxt.cons hA‚ÇÅ hœÉœÑ)).lam_inv
    let ‚ü®_, rlam‚ÇÅ, r'‚ü© := confluence r‚ÇÇ (.once .Œπl); rw [‚Üê substUnion] at r'
    let ‚ü®_, rlam‚ÇÇ, r'‚ü© := confluence r‚ÇÇ' r'; rw [‚Üê rlam‚ÇÇ.lam_inv] at r'
    injection Evals.lam_inv (.trans' rlam‚ÇÅ r') with en‚ÇÇ; subst en‚ÇÇ
    clear rlam‚ÇÅ rlam‚ÇÇ r' r‚ÇÅ; clear r'
    have r‚ÇÇ' :
      case (.inl v‚ÇÇ) (app (m‚ÇÅ‚¶É‚áë œÑ‚¶Ñ) (renameVal succ w‚¶É‚áë œÑ‚¶Ñ)) (app (m‚ÇÇ‚¶É‚áë œÑ‚¶Ñ) (renameVal succ w‚¶É‚áë œÑ‚¶Ñ))
        ‚áí‚ãÜ n‚ÇÇ‚¶Éw‚¶ÉœÑ‚¶Ñ‚¶Ñ := calc
      _ ‚áí  app (m‚ÇÅ‚¶É‚áë œÑ‚¶Ñ) (renameVal succ w‚¶É‚áë œÑ‚¶Ñ) ‚¶Év‚ÇÇ‚¶Ñ := .Œπl
      _ =  app (m‚ÇÅ‚¶Év‚ÇÇ +: œÑ‚¶Ñ) (w‚¶ÉœÑ‚¶Ñ)
        := by simp only [substCom]; rw [‚Üê substUnion, ‚Üê renameUpSubstVal, ‚Üê substDropVal]
      _ ‚áí‚ãÜ app (lam n‚ÇÇ) (w‚¶ÉœÑ‚¶Ñ) := r‚ÇÇ'.app
      _ ‚áí  n‚ÇÇ‚¶Éw‚¶ÉœÑ‚¶Ñ‚¶Ñ := .Œ≤
    exact ‚Ñ∞.bwds r‚ÇÅ' r‚ÇÇ' (hB‚ÇÅ _ _ (soundVal hw œÉ œÑ hœÉœÑ))
  | .inr ‚ü®v‚ÇÅ, v‚ÇÇ, hA‚ÇÇ, e‚ÇÅ, e‚ÇÇ‚ü© =>
    rw [e‚ÇÇ]; rw [e‚ÇÇ] at r‚ÇÇ
    let ‚ü®_, _, _, r‚ÇÇ', hB‚ÇÇ‚ü© := (soundCom hm‚ÇÇ (v‚ÇÅ +: œÉ) (v‚ÇÇ +: œÑ) (semCtxt.cons hA‚ÇÇ hœÉœÑ)).lam_inv
    let ‚ü®_, rlam‚ÇÅ, r'‚ü© := confluence r‚ÇÇ (.once .Œπr); rw [‚Üê substUnion] at r'
    let ‚ü®_, rlam‚ÇÇ, r'‚ü© := confluence r‚ÇÇ' r'; rw [‚Üê rlam‚ÇÇ.lam_inv] at r'
    injection Evals.lam_inv (.trans' rlam‚ÇÅ r') with en‚ÇÇ; subst en‚ÇÇ
    clear rlam‚ÇÅ rlam‚ÇÇ r' r‚ÇÅ; clear r'
    have r‚ÇÇ' :
      case (.inr v‚ÇÇ) (app (m‚ÇÅ‚¶É‚áë œÑ‚¶Ñ) (renameVal succ w‚¶É‚áë œÑ‚¶Ñ)) (app (m‚ÇÇ‚¶É‚áë œÑ‚¶Ñ) (renameVal succ w‚¶É‚áë œÑ‚¶Ñ))
        ‚áí‚ãÜ n‚ÇÇ‚¶Éw‚¶ÉœÑ‚¶Ñ‚¶Ñ := calc
      _ ‚áí  app (m‚ÇÇ‚¶É‚áë œÑ‚¶Ñ) (renameVal succ w‚¶É‚áë œÑ‚¶Ñ) ‚¶Év‚ÇÇ‚¶Ñ := .Œπr
      _ =  app (m‚ÇÇ‚¶Év‚ÇÇ +: œÑ‚¶Ñ) (w‚¶ÉœÑ‚¶Ñ)
        := by simp only [substCom]; rw [‚Üê substUnion, ‚Üê renameUpSubstVal, ‚Üê substDropVal]
      _ ‚áí‚ãÜ app (lam n‚ÇÇ) (w‚¶ÉœÑ‚¶Ñ) := r‚ÇÇ'.app
      _ ‚áí  n‚ÇÇ‚¶Éw‚¶ÉœÑ‚¶Ñ‚¶Ñ := .Œ≤
    exact ‚Ñ∞.bwds r‚ÇÅ' r‚ÇÇ' (hB‚ÇÅ _ _ (soundVal hw œÉ œÑ hœÉœÑ))

theorem fstCase {Œì v m‚ÇÅ m‚ÇÇ B‚ÇÅ B‚ÇÇ}
  (hcase : Œì ‚ä¢ case v m‚ÇÅ m‚ÇÇ ‚à∂ Prod B‚ÇÅ B‚ÇÇ) :
  Œì ‚ä® fst (case v m‚ÇÅ m‚ÇÇ) ~ case v (fst m‚ÇÅ) (fst m‚ÇÇ) ‚à∂ B‚ÇÅ := by
  intro œÉ œÑ hœÉœÑ
  let ‚ü®n‚ÇÅ, _, n‚ÇÇ, _, r‚ÇÅ, r‚ÇÇ, hB‚ÇÅ‚ü© := (soundCom hcase œÉ œÑ hœÉœÑ).fst
  have r‚ÇÅ' : fst ((case v m‚ÇÅ m‚ÇÇ)‚¶ÉœÉ‚¶Ñ) ‚áí‚ãÜ n‚ÇÅ := .trans' r‚ÇÅ.fst (.once .œÄ1)
  simp only [substCom] at *
  cases hcase with | case hv hm‚ÇÅ hm‚ÇÇ =>
  let hv := soundVal hv œÉ œÑ hœÉœÑ; unfold ùí± at hv
  match hv with
  | .inl ‚ü®v‚ÇÅ, v‚ÇÇ, hA‚ÇÅ, e‚ÇÅ, e‚ÇÇ‚ü© =>
    rw [e‚ÇÇ]; rw [e‚ÇÇ] at r‚ÇÇ
    let ‚ü®_, _, _, _, _, r‚ÇÇ', _‚ü© := (soundCom hm‚ÇÅ (v‚ÇÅ +: œÉ) (v‚ÇÇ +: œÑ) (semCtxt.cons hA‚ÇÅ hœÉœÑ)).fst
    let ‚ü®_, rprod‚ÇÅ, r'‚ü© := confluence r‚ÇÇ (.once .Œπl); rw [‚Üê substUnion] at r'
    let ‚ü®_, rprod‚ÇÇ, r'‚ü© := confluence r‚ÇÇ' r'; rw [‚Üê rprod‚ÇÇ.prod_inv] at r'
    injection Evals.prod_inv (.trans' rprod‚ÇÅ r') with en‚ÇÅ en‚ÇÇ; subst en‚ÇÅ en‚ÇÇ
    clear rprod‚ÇÅ rprod‚ÇÇ r' r‚ÇÅ; clear r'
    have r‚ÇÇ' :
      case (inl v‚ÇÇ) (fst (m‚ÇÅ‚¶É‚áë œÑ‚¶Ñ)) (fst (m‚ÇÇ‚¶É‚áë œÑ‚¶Ñ)) ‚áí‚ãÜ n‚ÇÇ := calc
      _ ‚áí  fst (m‚ÇÅ‚¶É‚áë œÑ‚¶Ñ)‚¶Év‚ÇÇ‚¶Ñ := .Œπl
      _ =  fst (m‚ÇÅ‚¶Év‚ÇÇ +: œÑ‚¶Ñ) := by simp only [substCom]; rw [‚Üê substUnion]
      _ ‚áí‚ãÜ fst (prod n‚ÇÇ _)   := r‚ÇÇ'.fst
      _ ‚áí n‚ÇÇ                 := .œÄ1
    exact ‚Ñ∞.bwds r‚ÇÅ' r‚ÇÇ' hB‚ÇÅ
  | .inr ‚ü®v‚ÇÅ, v‚ÇÇ, hA‚ÇÇ, e‚ÇÅ, e‚ÇÇ‚ü© =>
    rw [e‚ÇÇ]; rw [e‚ÇÇ] at r‚ÇÇ
    let ‚ü®_, _, _, _, _, r‚ÇÇ', _‚ü© := (soundCom hm‚ÇÇ (v‚ÇÅ +: œÉ) (v‚ÇÇ +: œÑ) (semCtxt.cons hA‚ÇÇ hœÉœÑ)).fst
    let ‚ü®_, rprod‚ÇÅ, r'‚ü© := confluence r‚ÇÇ (.once .Œπr); rw [‚Üê substUnion] at r'
    let ‚ü®_, rprod‚ÇÇ, r'‚ü© := confluence r‚ÇÇ' r'; rw [‚Üê rprod‚ÇÇ.prod_inv] at r'
    injection Evals.prod_inv (.trans' rprod‚ÇÅ r') with en‚ÇÅ en‚ÇÇ; subst en‚ÇÅ en‚ÇÇ
    clear rprod‚ÇÅ rprod‚ÇÇ r' r‚ÇÅ; clear r'
    have r‚ÇÇ' :
      case (inr v‚ÇÇ) (fst (m‚ÇÅ‚¶É‚áë œÑ‚¶Ñ)) (fst (m‚ÇÇ‚¶É‚áë œÑ‚¶Ñ)) ‚áí‚ãÜ n‚ÇÇ := calc
      _ ‚áí  fst (m‚ÇÇ‚¶É‚áë œÑ‚¶Ñ)‚¶Év‚ÇÇ‚¶Ñ := .Œπr
      _ =  fst (m‚ÇÇ‚¶Év‚ÇÇ +: œÑ‚¶Ñ) := by simp only [substCom]; rw [‚Üê substUnion]
      _ ‚áí‚ãÜ fst (prod n‚ÇÇ _)   := r‚ÇÇ'.fst
      _ ‚áí n‚ÇÇ                 := .œÄ1
    exact ‚Ñ∞.bwds r‚ÇÅ' r‚ÇÇ' hB‚ÇÅ

theorem sndCase {Œì v m‚ÇÅ m‚ÇÇ B‚ÇÅ B‚ÇÇ}
  (hcase : Œì ‚ä¢ case v m‚ÇÅ m‚ÇÇ ‚à∂ Prod B‚ÇÅ B‚ÇÇ) :
  Œì ‚ä® snd (case v m‚ÇÅ m‚ÇÇ) ~ case v (snd m‚ÇÅ) (snd m‚ÇÇ) ‚à∂ B‚ÇÇ := by
  intro œÉ œÑ hœÉœÑ
  let ‚ü®_, n‚ÇÅ, _, n‚ÇÇ, r‚ÇÅ, r‚ÇÇ, hB‚ÇÅ‚ü© := (soundCom hcase œÉ œÑ hœÉœÑ).snd
  have r‚ÇÅ' : snd ((case v m‚ÇÅ m‚ÇÇ)‚¶ÉœÉ‚¶Ñ) ‚áí‚ãÜ n‚ÇÅ := .trans' r‚ÇÅ.snd (.once .œÄ2)
  simp only [substCom] at *
  cases hcase with | case hv hm‚ÇÅ hm‚ÇÇ =>
  let hv := soundVal hv œÉ œÑ hœÉœÑ; unfold ùí± at hv
  match hv with
  | .inl ‚ü®v‚ÇÅ, v‚ÇÇ, hA‚ÇÅ, e‚ÇÅ, e‚ÇÇ‚ü© =>
    rw [e‚ÇÇ]; rw [e‚ÇÇ] at r‚ÇÇ
    let ‚ü®_, _, _, _, _, r‚ÇÇ', _‚ü© := (soundCom hm‚ÇÅ (v‚ÇÅ +: œÉ) (v‚ÇÇ +: œÑ) (semCtxt.cons hA‚ÇÅ hœÉœÑ)).snd
    let ‚ü®_, rprod‚ÇÅ, r'‚ü© := confluence r‚ÇÇ (.once .Œπl); rw [‚Üê substUnion] at r'
    let ‚ü®_, rprod‚ÇÇ, r'‚ü© := confluence r‚ÇÇ' r'; rw [‚Üê rprod‚ÇÇ.prod_inv] at r'
    injection Evals.prod_inv (.trans' rprod‚ÇÅ r') with en‚ÇÅ en‚ÇÇ; subst en‚ÇÅ en‚ÇÇ
    clear rprod‚ÇÅ rprod‚ÇÇ r' r‚ÇÅ; clear r'
    have r‚ÇÇ' :
      case (inl v‚ÇÇ) (snd (m‚ÇÅ‚¶É‚áë œÑ‚¶Ñ)) (snd (m‚ÇÇ‚¶É‚áë œÑ‚¶Ñ)) ‚áí‚ãÜ n‚ÇÇ := calc
      _ ‚áí  snd (m‚ÇÅ‚¶É‚áë œÑ‚¶Ñ)‚¶Év‚ÇÇ‚¶Ñ := .Œπl
      _ =  snd (m‚ÇÅ‚¶Év‚ÇÇ +: œÑ‚¶Ñ) := by simp only [substCom]; rw [‚Üê substUnion]
      _ ‚áí‚ãÜ snd (prod _ n‚ÇÇ)   := r‚ÇÇ'.snd
      _ ‚áí n‚ÇÇ                 := .œÄ2
    exact ‚Ñ∞.bwds r‚ÇÅ' r‚ÇÇ' hB‚ÇÅ
  | .inr ‚ü®v‚ÇÅ, v‚ÇÇ, hA‚ÇÇ, e‚ÇÅ, e‚ÇÇ‚ü© =>
    rw [e‚ÇÇ]; rw [e‚ÇÇ] at r‚ÇÇ
    let ‚ü®_, _, _, _, _, r‚ÇÇ', _‚ü© := (soundCom hm‚ÇÇ (v‚ÇÅ +: œÉ) (v‚ÇÇ +: œÑ) (semCtxt.cons hA‚ÇÇ hœÉœÑ)).snd
    let ‚ü®_, rprod‚ÇÅ, r'‚ü© := confluence r‚ÇÇ (.once .Œπr); rw [‚Üê substUnion] at r'
    let ‚ü®_, rprod‚ÇÇ, r'‚ü© := confluence r‚ÇÇ' r'; rw [‚Üê rprod‚ÇÇ.prod_inv] at r'
    injection Evals.prod_inv (.trans' rprod‚ÇÅ r') with en‚ÇÅ en‚ÇÇ; subst en‚ÇÅ en‚ÇÇ
    clear rprod‚ÇÅ rprod‚ÇÇ r' r‚ÇÅ; clear r'
    have r‚ÇÇ' :
      case (inr v‚ÇÇ) (snd (m‚ÇÅ‚¶É‚áë œÑ‚¶Ñ)) (snd (m‚ÇÇ‚¶É‚áë œÑ‚¶Ñ)) ‚áí‚ãÜ n‚ÇÇ := calc
      _ ‚áí  snd (m‚ÇÇ‚¶É‚áë œÑ‚¶Ñ)‚¶Év‚ÇÇ‚¶Ñ := .Œπr
      _ =  snd (m‚ÇÇ‚¶Év‚ÇÇ +: œÑ‚¶Ñ) := by simp only [substCom]; rw [‚Üê substUnion]
      _ ‚áí‚ãÜ snd (prod _ n‚ÇÇ)   := r‚ÇÇ'.snd
      _ ‚áí n‚ÇÇ                 := .œÄ2
    exact ‚Ñ∞.bwds r‚ÇÅ' r‚ÇÇ' hB‚ÇÅ
