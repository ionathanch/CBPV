import CBPV.Reduction
import CBPV.Typing

open ValType ComType Val Com

/-*--------------------------
  Logical relation on types
--------------------------*-/

mutual
@[simp]
def ùí± (A : ValType) (v : Val) : Prop :=
  match A with
  | .Unit => v = unit
  | U B => ‚àÉ m, ‚Ñ∞ B m ‚àß v = thunk m

@[simp]
def ùíû (B : ComType) (m : Com) : Prop :=
  match B with
  | F A => ‚àÉ v, ùí± A v ‚àß m = ret v
  | Arr A‚ÇÅ A‚ÇÇ => ‚àÉ n, (‚àÄ v, ùí± A‚ÇÅ v ‚Üí ‚Ñ∞ A‚ÇÇ (n‚¶Év‚¶Ñ)) ‚àß m = lam n

@[simp]
def ‚Ñ∞ (B : ComType) (m : Com) := ‚àÉ n, m ‚áì n ‚àß ùíû B n
end
notation:40 v:41 "‚àà" "‚ü¶" A:41 "‚üß·µõ" => ùí± A v
notation:40 m:41 "‚àà" "‚ü¶" B:41 "‚üß·∂ú" => ùíû B m
notation:40 m:41 "‚àà" "‚ü¶" B:41 "‚üß·µâ" => ‚Ñ∞ B m

-- Convenient constructors for the logical relation
theorem ùí±.unit : ùí± Unit unit := by simp
theorem ùí±.thunk {m B} (h : ‚Ñ∞ B m) : ùí± (U B) (thunk m) := by simp at *; assumption
theorem ùíû.ret {v A} (h : ùí± A v) : ùíû (F A) (ret v) := by simp; assumption
theorem ùíû.lam {n A‚ÇÅ A‚ÇÇ} (h : ‚àÄ v, ùí± A‚ÇÅ v ‚Üí ‚Ñ∞ A‚ÇÇ (n‚¶Év‚¶Ñ)) : ùíû (Arr A‚ÇÅ A‚ÇÇ) (lam n) := by simp at *; assumption

-- Semantic computations are normal
theorem ùíûnf {B m} (h : m ‚àà ‚ü¶ B ‚üß·∂ú) : nf m :=
  match (generalizing := true) B with
  | F _ | Arr _ _ =>
    by simp at h; let ‚ü®_, _, e‚ü© := h; subst e; exact ‚ü®‚ü©

-- Semantic computations embed into semantic evaluations
theorem ùíû‚Ñ∞ {B m} (h : m ‚àà ‚ü¶ B ‚üß·∂ú) : m ‚àà ‚ü¶ B ‚üß·µâ :=
  by simp; exact ‚ü®m, ‚ü®.refl m, ùíûnf h‚ü©, h‚ü©

-- Semantic evaluations are backward closed under reduction
theorem ‚Ñ∞bwd {B m n} (r : m ‚áí‚ãÜ n) (h : n ‚àà ‚ü¶ B ‚üß·µâ) : m ‚àà ‚ü¶ B ‚üß·µâ := by
  unfold ‚Ñ∞ at *
  let ‚ü®n', ‚ü®r', nfn‚ü©, h‚ü© := h
  refine ‚ü®n', ‚ü®trans' r r', nfn‚ü©, h‚ü©
theorem ùíûbwd {B m n} (r : m ‚áí‚ãÜ n) (h : n ‚àà ‚ü¶ B ‚üß·∂ú) : m ‚àà ‚ü¶ B ‚üß·µâ := ‚Ñ∞bwd r (ùíû‚Ñ∞ h)

/-*----------------
  Semantic typing
----------------*-/

-- Semantic well-formedness of contexts
def semCtxt Œì (œÉ : Nat ‚Üí Val) := ‚àÄ {x A}, Œì ‚àã x ‚à∂ A ‚Üí œÉ x ‚àà ‚ü¶ A ‚üß·µõ
notation:40 Œì:41 "‚ä®" œÉ:41 => semCtxt Œì œÉ

-- Convenient constructors for semantic contexts
theorem semCtxtNil : ‚¨ù ‚ä® var := by intro _ _ mem; cases mem
theorem semCtxtCons {Œì œÉ v A} (h : v ‚àà ‚ü¶ A ‚üß·µõ) (hœÉ : Œì ‚ä® œÉ) : Œì ‚à∑ A ‚ä® v +: œÉ
  | _, _, .here => h
  | _, _, .there mem => hœÉ mem

-- Semantic typing of values and computations
@[simp] def semVal Œì v A := ‚àÄ œÉ, Œì ‚ä® œÉ ‚Üí v‚¶ÉœÉ‚¶Ñ ‚àà ‚ü¶ A ‚üß·µõ
@[simp] def semCom Œì m B := ‚àÄ œÉ, Œì ‚ä® œÉ ‚Üí m‚¶ÉœÉ‚¶Ñ ‚àà ‚ü¶ B ‚üß·µâ
notation:40 Œì:41 "‚ä®" v:41 "‚à∂" A:41 => semVal Œì v A
notation:40 Œì:41 "‚ä®" m:41 "‚à∂" B:41 => semCom Œì m B

/-*----------------------------------------
  Fundamental theorem of soundness
  of syntactic typing wrt semantic typing
----------------------------------------*-/

theorem soundness {Œì} :
  (‚àÄ (v : Val) A, Œì ‚ä¢ v ‚à∂ A ‚Üí Œì ‚ä® v ‚à∂ A) ‚àß
  (‚àÄ (m : Com) B, Œì ‚ä¢ m ‚à∂ B ‚Üí Œì ‚ä® m ‚à∂ B) := by
  refine ‚ü®Œª v A h ‚Ü¶ ?val, Œª m B h ‚Ü¶ ?com‚ü©
  mutual_induction h, h
  all_goals intro œÉ hœÉ
  case var mem => exact hœÉ mem
  case unit => exact ùí±.unit
  case thunk ih => exact ùí±.thunk (ih œÉ hœÉ)
  case force ih =>
    simp at ih
    let ‚ü®_, ‚ü®_, ‚ü®r, _‚ü©, h‚ü©, e‚ü© := ih œÉ hœÉ
    let rf := Steps.trans .force r
    rw [‚Üê e] at rf
    exact ùíûbwd rf h
  case lam ih =>
    apply ùíû‚Ñ∞; apply ùíû.lam
    intro v hv; rw [‚Üê substUnion]
    exact ih (v +: œÉ) (semCtxtCons hv hœÉ)
  case app ihm ihv =>
    simp at ihm
    let ‚ü®_, ‚ü®rlam, _‚ü©, _, h, e‚ü© := ihm œÉ hœÉ; subst e
    let ‚ü®_, ‚ü®rval, _‚ü©, h‚ü© := h _ (ihv œÉ hœÉ)
    exact ùíûbwd (trans' (stepsApp rlam) (.trans .lam rval)) h
  case ret ih => exact ùíû‚Ñ∞ (ùíû.ret (ih œÉ hœÉ))
  case letin ihret ih =>
    simp at ihret ih
    let ‚ü®_, ‚ü®rret, _‚ü©, v, hv, e‚ü© := ihret œÉ hœÉ; subst e
    let ‚ü®_, ‚ü®rlet, nflet‚ü©, h‚ü© := ih (v +: œÉ) (semCtxtCons hv hœÉ)
    rw [substUnion] at rlet
    exact ùíûbwd (trans' (stepsLet rret) (.trans .ret rlet)) h

-- If a computation does not step, then it is in normal form
theorem normal {m B} (nr : ‚àÄ {n}, ¬¨ m ‚áí n) (h : ‚¨ù ‚ä¢ m ‚à∂ B) : nf m := by
  let ‚ü®_, soundCom‚ü© := soundness (Œì := ‚¨ù)
  let mB := soundCom m B h
  simp at mB
  let ‚ü®_, ‚ü®r, nfm‚ü©, _‚ü© := mB var semCtxtNil
  rw [substComId] at r
  cases r with | refl => exact nfm | trans r _ => cases nr r

-- Computations are strongly normalizing
theorem normalization {m : Com} {B : ComType} (h : ‚¨ù ‚ä¢ m ‚à∂ B) : SN m := by
  let ‚ü®_, soundCom‚ü© := soundness (Œì := ‚¨ù)
  let mB := soundCom m B h
  simp at mB
  let ‚ü®_, ‚ü®r, nfm‚ü©, _‚ü© := mB var semCtxtNil
  rw [substComId] at r
  exact stepsSN r nfm
