import CBPV.OpenSemantics
import CBPV.Typing

open ValType ComType Val Com

/-*----------------
  Semantic typing
----------------*-/

-- Semantic well-formedness of contexts
def semCtxt Œì (œÉ : Nat ‚Üí Val) := ‚àÄ {x A}, Œì ‚àã x ‚à∂ A ‚Üí ‚àÄ {P}, ‚ü¶ A ‚üß·µõ ‚Üò P ‚Üí P (œÉ x)
notation:40 Œì:41 "‚ä®" œÉ:41 => semCtxt Œì œÉ

-- Convenient constructors for semantic contexts
theorem semCtxtVar {Œì} : Œì ‚ä® var :=  Œª _ _ hA ‚Ü¶ hA.sneVal .var
theorem semCtxtNil : ‚¨ù ‚ä® var := semCtxtVar
theorem semCtxtCons {Œì œÉ v A P} (h : ‚ü¶ A ‚üß·µõ ‚Üò P) (pv : P v) (hœÉ : Œì ‚ä® œÉ) : Œì ‚à∑ A ‚ä® v +: œÉ
  | _, _, .here, _, h' => by rw [ùí±.det h' h]; exact pv
  | _, _, .there mem, _, h => hœÉ mem h

-- Semantic typing of values and computations
@[simp] def semVal Œì v A := ‚àÄ œÉ, Œì ‚ä® œÉ ‚Üí ‚àÉ P, ‚ü¶ A ‚üß·µõ ‚Üò P ‚àß P (v‚¶ÉœÉ‚¶Ñ)
@[simp] def semCom Œì m B := ‚àÄ œÉ, Œì ‚ä® œÉ ‚Üí ‚àÉ P, ‚ü¶ B ‚üß·∂ú ‚Üò P ‚àß P (m‚¶ÉœÉ‚¶Ñ)
notation:40 Œì:41 "‚ä®" v:41 "‚à∂" A:41 => semVal Œì v A
notation:40 Œì:41 "‚ä®" m:41 "‚à∂" B:41 => semCom Œì m B

/-*------------------------------
  Fundamental soundness theorem
------------------------------*-/

theorem SNup {Œì œÉ A B P} {m : Com}
  (hœÉ : Œì ‚ä® œÉ) (hA : ‚ü¶ A ‚üß·µõ ‚Üò P) (h : Œì ‚à∑ A ‚ä® m ‚à∂ B) : SNCom (m‚¶É‚áë œÉ‚¶Ñ) := by
  let ‚ü®Q, hB, qm‚ü© := h (var 0 +: œÉ) (semCtxtCons hA (hA.sneVal .var) hœÉ)
  rw [substComVar] at qm
  exact (hB.snCom qm).antirenaming

theorem soundness {Œì} :
  (‚àÄ (v : Val) A, Œì ‚ä¢ v ‚à∂ A ‚Üí Œì ‚ä® v ‚à∂ A) ‚àß
  (‚àÄ (m : Com) B, Œì ‚ä¢ m ‚à∂ B ‚Üí Œì ‚ä® m ‚à∂ B) := by
  refine ‚ü®Œª v A h ‚Ü¶ ?val, Œª m B h ‚Ü¶ ?com‚ü©
  mutual_induction h, h
  all_goals intro œÉ hœÉ
  case var A mem =>
    let ‚ü®P, hA‚ü© := A.interp
    exact ‚ü®P, hA, hœÉ mem hA‚ü©
  case unit => exact ‚ü®_, .Unit, .inr .refl‚ü©
  case inl A‚ÇÇ _ ih =>
    let ‚ü®_, hA‚ÇÇ‚ü© := A‚ÇÇ.interp
    let ‚ü®_, hA‚ÇÅ, pv‚ü© := ih œÉ hœÉ
    refine ‚ü®_, .Sum hA‚ÇÅ hA‚ÇÇ, .inr (.inl ‚ü®_, .refl, pv‚ü©)‚ü©
  case inr A‚ÇÅ _ _ ih =>
    let ‚ü®_, hA‚ÇÅ‚ü© := A‚ÇÅ.interp
    let ‚ü®_, hA‚ÇÇ, pv‚ü© := ih œÉ hœÉ
    refine ‚ü®_, .Sum hA‚ÇÅ hA‚ÇÇ, .inr (.inr ‚ü®_, .refl, pv‚ü©)‚ü©
  case thunk ih =>
    let ‚ü®_, hB, pm‚ü© := ih œÉ hœÉ
    exact ‚ü®_, .U hB, hB.closure (.once .thunk) pm‚ü©
  case force ih =>
    let ‚ü®_, hUB, pv‚ü© := ih œÉ hœÉ
    cases hUB with | U hB => exact ‚ü®_, hB, pv‚ü©
  case lam m A B _ ih =>
    let ‚ü®P, hA‚ü© := A.interp
    let ‚ü®Q, hB‚ü© := B.interp
    refine ‚ü®_, .Arr hA hB, Œª v pv ‚Ü¶ ?_‚ü©
    let ‚ü®_, hB', pm‚ü© := ih (v +: œÉ) (semCtxtCons hA pv hœÉ)
    rw [ùíû.det hB' hB] at pm
    let r : app ((lam m)‚¶ÉœÉ‚¶Ñ) v ‚§≥‚ãÜ m‚¶Év +: œÉ‚¶Ñ := by
      calc
        app ((lam m)‚¶ÉœÉ‚¶Ñ) v
        _ ‚§≥‚ãÜ app (lam (m‚¶É‚áë œÉ‚¶Ñ)) v := .refl
        _ ‚§≥‚ãÜ m‚¶É‚áë œÉ‚¶Ñ‚¶Év‚¶Ñ            := .once (.lam (hA.snVal pv))
        _ ‚§≥‚ãÜ m‚¶Év +: œÉ‚¶Ñ            := by rw [‚Üê substUnion]
    exact hB.closure r pm
  case app ihm ihv =>
    let ‚ü®_, hArr, pm‚ü© := ihm œÉ hœÉ
    let ‚ü®_, hA, pv‚ü© := ihv œÉ hœÉ
    cases hArr with | Arr hA' hB =>
      rw [ùí±.det hA hA'] at pv
      exact ‚ü®_, hB, pm _ pv‚ü©
  case ret ih =>
    let ‚ü®_, hA, pv‚ü© := ih œÉ hœÉ
    exact ‚ü®_, .F hA, Or.inr ‚ü®_, .refl, pv‚ü©‚ü©
  case letin m n _ B _ _ ihm ihn =>
    let ‚ü®_, hFA, pm‚ü© := ihm œÉ hœÉ
    cases hFA with | F hA =>
    match pm with
    | .inl ‚ü®_, r, sne‚ü© =>
      let ‚ü®P, hB‚ü© := B.interp
      let plet := hB.sneCom (.letin sne (SNup hœÉ hA ihn))
      exact ‚ü®P, hB, hB.closure (.letin r) plet‚ü©
    | .inr ‚ü®v, r, pv‚ü© =>
      let ‚ü®_, hB, pn‚ü© := ihn (v +: œÉ) (semCtxtCons hA pv hœÉ)
      let r' : (letin m n)‚¶ÉœÉ‚¶Ñ ‚§≥‚ãÜ n‚¶Év +: œÉ‚¶Ñ := by
        calc
          (letin m n)‚¶ÉœÉ‚¶Ñ
          _ ‚§≥‚ãÜ letin (m‚¶ÉœÉ‚¶Ñ) (n‚¶É‚áë œÉ‚¶Ñ)   := .refl
          _ ‚§≥‚ãÜ letin (.ret v) (n‚¶É‚áë œÉ‚¶Ñ) := .letin r
          _ ‚§≥‚ãÜ n‚¶É‚áë œÉ‚¶Ñ‚¶Év‚¶Ñ               := .once (.ret (hA.snVal pv))
          _ ‚§≥‚ãÜ n‚¶Év +: œÉ‚¶Ñ               := by rw [‚Üê substUnion]
      exact ‚ü®_, hB, hB.closure r' pn‚ü©
  case case v m n _ _ B _ _ _ ihv ihm ihn =>
    let ‚ü®_, hSum, pv‚ü© := ihv œÉ hœÉ
    cases hSum with | Sum hA‚ÇÅ hA‚ÇÇ =>
      let snm := SNup hœÉ hA‚ÇÅ ihm
      let snn := SNup hœÉ hA‚ÇÇ ihn
      match pv with
      | .inl sne =>
        let ‚ü®P, hB‚ü© := B.interp
        exact ‚ü®P, hB, hB.sneCom (.case sne snm snn)‚ü©
      | .inr (.inl ‚ü®w, r, pv‚ü©) =>
        let ‚ü®R, hB, rm‚ü© := ihm (w +: œÉ) (semCtxtCons hA‚ÇÅ pv hœÉ)
        let r' : (case v m n)‚¶ÉœÉ‚¶Ñ ‚§≥‚ãÜ m‚¶Éw +: œÉ‚¶Ñ := by
          calc
            (case v m n)‚¶ÉœÉ‚¶Ñ
            _ ‚§≥‚ãÜ case (v‚¶ÉœÉ‚¶Ñ) (m‚¶É‚áë œÉ‚¶Ñ) (n‚¶É‚áë œÉ‚¶Ñ) := .refl
            _ ‚§≥‚ãÜ case (inl w) (m‚¶É‚áë œÉ‚¶Ñ) (n‚¶É‚áë œÉ‚¶Ñ) := .case r
            _ ‚§≥‚ãÜ m‚¶É‚áë œÉ‚¶Ñ‚¶Éw‚¶Ñ                      := .once (.inl snn)
            _ ‚§≥‚ãÜ m‚¶Éw +: œÉ‚¶Ñ                      := by rw [‚Üê substUnion]
        exact ‚ü®R, hB, hB.closure r' rm‚ü©
      | .inr (.inr ‚ü®w, r, qv‚ü©) =>
        let ‚ü®R, hB, rm‚ü© := ihn (w +: œÉ) (semCtxtCons hA‚ÇÇ qv hœÉ)
        let r' : (case v m n)‚¶ÉœÉ‚¶Ñ ‚§≥‚ãÜ n‚¶Éw +: œÉ‚¶Ñ := by
          calc
            (case v m n)‚¶ÉœÉ‚¶Ñ
            _ ‚§≥‚ãÜ case (v‚¶ÉœÉ‚¶Ñ) (m‚¶É‚áë œÉ‚¶Ñ) (n‚¶É‚áë œÉ‚¶Ñ) := .refl
            _ ‚§≥‚ãÜ case (inr w) (m‚¶É‚áë œÉ‚¶Ñ) (n‚¶É‚áë œÉ‚¶Ñ) := .case r
            _ ‚§≥‚ãÜ n‚¶É‚áë œÉ‚¶Ñ‚¶Éw‚¶Ñ                      := .once (.inr snm)
            _ ‚§≥‚ãÜ n‚¶Éw +: œÉ‚¶Ñ                      := by rw [‚Üê substUnion]
        exact ‚ü®R, hB, hB.closure r' rm‚ü©

theorem normalization {Œì} :
  (‚àÄ {v : Val} {A}, Œì ‚ä¢ v ‚à∂ A ‚Üí SNVal v) ‚àß
  (‚àÄ {m : Com} {B}, Œì ‚ä¢ m ‚à∂ B ‚Üí SNCom m) := by
  let ‚ü®soundVal, soundCom‚ü© := @soundness Œì
  refine ‚ü®Œª h ‚Ü¶ ?val, Œª h ‚Ü¶ ?com‚ü©
  case val =>
    let ‚ü®_, hA, pv‚ü© := soundVal _ _ h _ semCtxtVar
    rw [substValId] at pv
    exact hA.snVal pv
  case com =>
    let ‚ü®_, hB, pm‚ü© := soundCom _ _ h _ semCtxtVar
    rw [substComId] at pm
    exact hB.snCom pm
